// v0.2a new getratio()
// v0.2  new putonplane()
// v0.1  new putonvec()

////////////////////////////////////////////////////////////////
///////////////           VECTOR TOOLS           ///////////////

global proc vector vec(){

    global vector $gBaVec, $gBaVecA;

    string $lssl[] = `ls -fl -sl`;
    if (size($lssl))
        $gBaVecA = doVec($lssl[0], "");
    if (size($lssl) > 1)
        $gBaVec = doVec($lssl[0], $lssl[1]);
    else
        $gBaVec = $gBaVecA;

    return $gBaVec;
}

global proc vecmove(int $inv){

    global vector $gBaVec;
    if (!$gBaVec)
        vec();

    move -r ($gBaVec.x * $inv) ($gBaVec.y * $inv) ($gBaVec.z * $inv);
}
global proc vecmoveto(vector $inv){
    global vector $gBaVec;
    if (!$gBaVec)
        vec();

    move ($gBaVec.x * $inv.x) ($gBaVec.y * $inv.y) ($gBaVec.z * $inv.z);
}
global proc doVecMove(string $lssl[]){

    global vector $gBaVec;
    if (!$gBaVec)
        vec();
    move -r ($gBaVec.x) ($gBaVec.y) ($gBaVec.z) $lssl;
}

global proc vector doVec(string $a, string $b){

    vector $vec, $B;
    vector $A = `xform -q -ws -rp $a`;

    if (size(`ls -type float3 $a`))
        $A = `xform -q -ws -t $a`;
    
    if ($b != ""){
        $B = `xform -q -ws -rp $b`;
        if (size(`ls -type float3 $b`))
            $B = `xform -q -ws -t $b`;
        $vec = $B - $A;
    }
    else{
        $vec = $A;
    }
    // $gBaVec = $vec;
    return $vec;
}

global proc float dist(){
    
    float $len;
    vector $pos;
    vector $cur_pos;
    vector $pre_pos;
    
    $lssl = `ls -fl -sl`;
    $pos = `xform -q -ws -t $lssl[0]`;
    
    for ($sel in $lssl){
        vector $cur_pos = `xform -q -ws -t $sel`;
        vector $delta_pos = $cur_pos - $pos;
        $len += mag($delta_pos);
        $pos = $cur_pos;
        print ("len: " + $len + " || delta: " + $delta_pos + "\n");
    }
    return $len;
}

global proc float doDist(string $a, string $b){

    float $len;
    vector $A = doVec($a, $b);
    
    $len = mag($A);

    return $len;
}

global proc eqlz(){
    
    vector $A, $pos, $step;
    
    $lssl = `ls -sl`;
    $ls_sz = size($lssl);
    $fst = $lssl[0];
    $lst = $lssl[$ls_sz-1];
    
    $A = `xform -q -ws -t $fst`;
    $dist = doDist($fst, $lst);
    $vec = doVec($fst, $lst);
    $vec_nrm = unit($vec);
    $mlt = $dist / ($ls_sz-1);
    $step = $vec_nrm * $mlt;
    $pos = $A;
    for($i = 1; $i<$ls_sz-1; $i++){
        $pos += $step;
        $trg = $lssl[$i];
        xform -ws -t ($pos.x) ($pos.y) ($pos.z) $trg;
    }
    
}

////////////////////////////////////////////////////////////////
///////////////       VECTOR PROJECT TOOLS       ///////////////

global proc float doVecRatio(vector $vecA, vector $vecB){
    
    float $rat = mag($vecB) / mag($vecA);
    return $rat;
}


global proc float vecratio(){
    global vector $gBaVec;
    if (!mag($gBaVec))
        return 0;

    string $lssl[] = `ls -fl -sl`;
    $vec = doVec($lssl[0], $lssl[1]);
    $rat = doVecRatio($gBaVec, $vec);
    return $rat;
}

global proc putonvec(){

    // first user must use vec() to initiate data
    $lssl = `ls -sl -fl`;
    vector $pos;
    for ($sel in $lssl){
        $pos = doPutOnVec($sel);
        xform -ws -t ($pos.x) ($pos.y) ($pos.z) $sel;
    }
    
}

global proc vector doPutOnVec(string $sel){
    
    global vector $gBaVec, $gBaVecA;
    
    vector $p1;
    if ($gBaVec || $gBaVecA){
        $C = doVec($sel, "");
        $p1 = projectOnVec($C, $gBaVec, $gBaVecA);
    }

    return $p1;

}

global proc vector projectOnVec(vector $C, vector $vec, vector $A){

    // args:
    // - $C     - vector - point that be projected on $vec
    // - $vec   - vector - line where point will be projected
    // - $A     - vector - inital/start point of vector

    $c = $C - $A;
    $vec_nrm = unit($vec);
    $dot = $c * $vec_nrm;
    $c1 = $vec_nrm * $dot;
    $C1 = $c1 + $A;
    return $C1;
}

global proc float getratio(){
    // returns(float), value(ratio) between two targets
    //   according to distance
    // select only 3 items: trgA, trgB and child
    $lssl = `ls -fl -sl`;
    if (size($lssl) != 3)
        return -1;
    $trgA = $lssl[0];
    $trgB = $lssl[1];
    $chld = $lssl[2];

    vector $A = `xform -q -ws -t $trgA`;
    vector $B = `xform -q -ws -t $trgB`;
    vector $C = `xform -q -ws -t $chld`;
    $AC = $C - $A;
    $BC = $C - $B;
    // print $AC;
    // print $BC;
    float $a = mag($AC);
    float $b = mag($BC);
    float $sum = $a + $b;
    float $ratio = $a / $sum;
    print {$ratio};
    return $ratio;
}

////////////////////////////////////////////////////////////////
///////////////           MATRIX TOOLS           ///////////////

// usage:
//  vector $vecA = <<0, 1.5, 0.8>>;
//  vector $vecB = <<0, 0.5, -0.3>>;
//  vector $vecX = unit(cross($vecA, $vecB));    // normalized crossProduct(rotation axis)
//  float $dot1 = dot(unit($vecA), unit($vecB));
//  float $angle1 = acos($dot1);
//  matrix $R1 = rotMat($vecX, $angle);   // voila!
global proc matrix rotMat(vector $vec, float $angle){
    
    global matrix $gBaMtx[4][4];

    $cosThetta = cos($angle);
    $sinThetta = sin($angle);
    matrix $R1[4][4];
    $R1[0][0] = $cosThetta + pow($vec.x, 2) * (1 - $cosThetta);
    $R1[0][1] = $vec.x * $vec.y * (1 - $cosThetta) - $vec.z * $sinThetta;
    $R1[0][2] = $vec.x * $vec.z * (1 - $cosThetta) + $vec.y * $sinThetta;
    
    $R1[1][0] = $vec.y * $vec.x * (1 - $cosThetta) + $vec.z * $sinThetta;
    $R1[1][1] = $cosThetta + pow($vec.y, 2) * (1 - $cosThetta);
    $R1[1][2] = $vec.y * $vec.z * (1 - $cosThetta) - $vec.x * $sinThetta;
    
    $R1[2][0] = $vec.z * $vec.x * (1 - $cosThetta) - $vec.y * $sinThetta;
    $R1[2][1] = $vec.z * $vec.y * (1 - $cosThetta) + $vec.x * $sinThetta;
    $R1[2][2] = $cosThetta + pow($vec.z, 2) * (1 - $cosThetta);

    $R1[3][3] = 1.0;
    $gBaMtx = $R1;
    return $R1;
}

global proc matrix doRotMat(vector $A, vector $B){

    // $A child, $B target
    vector $X = unit(cross($A, $B));
    float $dot = dot(unit($A), unit($B));
    float $rad = acos($dot);
    matrix $R1[4][4] = rotMat($X, $rad);   // voila!
    return $R1;
}

global proc vector multmtxvec(){

    global matrix $gBaMtx[4][4];
    global vector $gBaVec;
    if (!$gBaVec)
        vec();

    $Rv = doMultMatVec($gBaMtx, $gBaVec);
    return $Rv;
}

global proc vector doMultMtxVec(matrix $R, vector $vec){
    
    vector $Rv;
    
    $axisX = $R[0][0] * $vec.x + $R[1][0] * $vec.y + $R[2][0] * $vec.z;
    $axisY = $R[0][1] * $vec.x + $R[1][1] * $vec.y + $R[2][1] * $vec.z;
    $axisZ = $R[0][2] * $vec.x + $R[1][2] * $vec.y + $R[2][2] * $vec.z;
    $Rv = <<$axisX, $axisY, $axisZ>>;

    return $Rv;
}

global proc setRotMat(string $sel, float $t[], matrix $R){
    
    vector $pos = `xform -q -ws -t $sel`;
    matrix $T[4][4] = floatArrayToMatrix($t);
    matrix $M[4][4] = $R * $T;
    $M[3][0] = $pos.x;
    $M[3][1] = $pos.y;
    $M[3][2] = $pos.z;
    doApplyMtx($sel, $M);
}

global proc doApplyMtx(string $sel, matrix $R){

    xform -ws -m 
        $R[0][0] $R[0][1] $R[0][2] $R[0][3]
        $R[1][0] $R[1][1] $R[1][2] $R[1][3]
        $R[2][0] $R[2][1] $R[2][2] $R[2][3]
        $R[3][0] $R[3][1] $R[3][2] $R[3][3]
        $sel;
}

global proc matrix floatArrayToMatrix(float $t[]){

    matrix $T[4][4] = <<
        $t[0],  $t[1],  $t[2],  $t[3];
        $t[4],  $t[5],  $t[6],  $t[7];
        $t[8],  $t[9],  $t[10], $t[11];
        $t[12], $t[13], $t[14], $t[15]
    >>;
    return $T;
}


////////////////////////////////////////////////////////////////
///////////////            PLANE TOOLS           ///////////////

global proc ext(){

    global vector $gPlane[];
    if (!size($gPlane))
        return;

    vector $P, $P1;
    vector $vecs[];
    $lssl = `ls -sl -fl -type float3`;
    string $edgs[] = `doFindEdges $lssl`;
    vector $all_vec[];
    //$sel = $edgs[0]
    // $P1 = `putOnPlane $vecs[0] $p $gPlane`
    // $P1 = `doPutOnPlane $vecs $gPlane`
    for ($sel in $edgs){
        print {"Edge: " + $sel};
        $vecs = `xform -q -ws -t $sel`;
        $p = unit($vecs[1] - $vecs[0]);
        
        $verts = doFindVerts({$sel});
        $closest_vtx = "";
        $dist = 0.0;
        float $dists[];
        $j = 0;
        // find max distnace to exclude
        for ($i=0; $i<size($vecs); $i++){
            $P = $vecs[$i];
            $d = getDistanceToPlane($P, $p, $gPlane);
            $dists[$i] = $d;
            if ($d > $dist){
                $dist = $d;
                $j = $i;
            }
        }
        $vtx = $verts[!$j];
        $P = $vecs[!$j];
        $d = $dists[!$j];
        $P1 = $P - ($p * $d);
        print {" Moving Vertex: " + $vtx};
        print {"  To: " + $P1};
        move -ws ($P1.x) ($P1.y) ($P1.z) $vtx;
    }
}

global proc vector[] vecplane(){

    global vector $gPlane[];
    // if (size($gPlane))
    $ls_pts = `ls -fl -sl -type float3`;
    if (size($ls_pts) && size($ls_pts) == 3){
    
        vector $O = `xform -q -ws -t $ls_pts[0]`;
        vector $A = `xform -q -ws -t $ls_pts[1]`;
        vector $B = `xform -q -ws -t $ls_pts[2]`;
        $gPlane[0] = $O;
        $gPlane[1] = $A;
        $gPlane[2] = $B;
    }
    return $gPlane;
}

global proc vector doPutOnPlane( vector $vecData[],
                                 vector $plane[] ){
    
    // Main Equation (find distance to dP1)
    // d = (P - O) * n / p * n
    // works with single point or point and its vector
    float $eps = 0.001;
    vector $P = $vecData[0];
    vector $P1;
    
    $O = $plane[0];
    $a = $plane[1] - $O;
    $b = $plane[2] - $O;
    if (size($vecData) > 1)
        $p = unit($vecData[1] - $vecData[0]);
    else
        $p = unit($P - $O);
    $OP = $P - $O;
    $n = unit(cross($a, $b));
    $dot = dot($p, $n);
    
    // check n direction
    $sign = $dot < 0 ? -1 : 1;
    $n *= $sign;
    $dot *= $sign;
    // check collinearity
    if (abs($dot) == 0.0 || abs($dot) <= $eps)
        return $P1;
    
    
    // project p on n
    // $pn = $dot * $n;
    // $P1 = $P - $pn;
    
    $d = ($OP * $n) / ($p * $n);
    $P1 = $P - ($p * $d);
    return $P1;
}
global proc putonplane(){

    global vector $gPlane[];

    // check plane if poly selected
    if (!size($gPlane))
        return;
    // vector 
    // ideally it should be edge, closest vertex
    //  will be extended
    // if vtx selected just project by normal
    
    // if edge selected
}

global proc
float getDistanceToPlane(
        vector $P,
        vector $p,
        vector $plane[]){
    
    // returns two vectors on
    $O = $plane[0];
    $a = $plane[1] - $O;
    $b = $plane[2] - $O;
    $n = unit(cross($a, $b));
    float $dot = dot($p, $n);
    $OP = $P - $O;
    // check collinearity
    if (abs($dot) == 0){
        print "<!>  No intersection is avaliable\n";
        return 0.0;
    }
    // check n direction
    $sign = $dot < 0 ? -1 : 1;
    $n *= $sign;
    $dot *= $sign;
    // print ("  Nominator: " + ($OP * $n) + "\n");
    // print ("Denominator: " + ($p * $n) + "\n");
    $d = ($OP * $n) / ($p * $n);
    return $d;
}

////////////////////////////////////////////////////////////////
///////////////            POLY TOOLS            ///////////////
global proc string[] doFindVerts(string $lssl[]){
    
    string $sel, $comp;
    string $verts[] = `filterExpand -sm 31 $lssl`;
    string $edgs[];
    string $pat = "vtx[^1s]";
    if (!size($verts)){
        int $v;
        $edgs = doFindEdges($lssl);
        // convert edge to verts
        // $sel = $edgs[0]
        for ($sel in $edgs){
            $comps_info = `polyInfo -ev $sel`;
            // $line = $comps_info[0];
            for ($line in $comps_info)
                // $id = 8;
                for ($id in pinfo($line)){
                    $comp = `format -s $id $pat`;
                    $vtx = `substitute "[^.]+$" $sel $comp`;
                    $verts[$v++] = $vtx;
                }
        }
    }
    return $verts;
}

global proc string[] doFindEdges(string $lssl[]){
    
    string $sel, $comp;
    string $edgs[] = `filterExpand -sm 32 $lssl`;
    
    if (!size($edgs)){
        int $e;
        // convert face to edges
        string $faces[] = `filterExpand -sm 34 $lssl`;
        for ($sel in $faces){
            $comp_info = `polyInfo -fe $sel`;
            for ($line in $comp_info)
                for ($id in pinfo($line)){
                    $comp = `format -s $id "e[^1s]"`;
                    $edg = `substitute "[^.]+$" $sel $comp`;
                    $edgs[$e++] = $edg;
                }    
        }
    }
    // print $edgs;
    return $edgs;
}

global proc float[] pinfo(string $line){
    // reads line from 3rd non space numeric data, e.g:
    //  EDGE    15: 10   12  HARD
    //  x       x   ^    ^   x
    string $spl[];
    tokenizeList($line, $spl);
    $typ = $spl[0];
    $idx = $spl[1];
    float $comps[];
    int $c;
    for ($i=2; $i<size($spl); $i++){
        // print {">" + $spl[$i]};
        $mtch = `match "[0-9.]+" $spl[$i]`;
        if ($mtch == "")
            continue;
        // print {"MTCH: " + $mtch};
        $comps[$c++] = float($mtch);
    }
    return $comps;
}

////////////////////////////////////////////////////////////////
///////////////            JOINT TOOLS           ///////////////

global proc string vecjnt(){

    global vector $gBaVec;
    if (!$gBaVec)
        vec();
    return `doVecJnt $gBaVec ""`;
}

global proc string doVecJnt(vector $pos, string $name){
    
    if (`objExists $name`)
        move -ws ($pos.x) ($pos.y) ($pos.z) $name;
    else
        $name = `joint -n $name -p ($pos.x) ($pos.y) ($pos.z)`;
    return $name;
}

////////////////////////////////////////////////////////////////
///////////////            OTHER TOOLS           ///////////////
global proc vector vecmanip(){
    global vector $gBaVec;
    $gBaVec = `getManipPos`;
    return $gBaVec;
}

global proc vector getManipPos(){
    
    vector $pos;
    string $manip = `currentCtx`;
    
    if ($manip != ""){
        $typ = `match "^[a-zA-Z][a-z]+" $manip`;
        $part2 = toupper(startString($typ, 1)) + endString($typ, size($typ)-1);
        // vector $pos = `manipMoveContext -q -p $part2`;
        $tool = `format -s $part2 "manip^1sContext"`;
        $eval = `format -s $tool -s $part2 "^1s -q -p ^2s"`;
        $pos = eval($eval);
    }

    return $pos;
}